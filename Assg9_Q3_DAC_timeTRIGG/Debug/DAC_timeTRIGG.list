
DAC_timeTRIGG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000340  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c8  080004d0  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c8  080004c8  000014d0  2**0
                  CONTENTS
  4 .ARM          00000000  080004c8  080004c8  000014d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c8  080004d0  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c8  080004c8  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004cc  080004cc  000014cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000014d0  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011c4  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004b0  00000000  00000000  000026be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00002b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008b  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f92  00000000  00000000  00002cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000137c  00000000  00000000  0001bc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd08  00000000  00000000  0001cfe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8ce9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001b4  00000000  00000000  000a8d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  000a8eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004b0 	.word	0x080004b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004b0 	.word	0x080004b0

080001c8 <DAC_Init>:
 *  Created on: Oct 6, 2024
 *      Author: bhimashankar
 */
#include "DAC.h"

void DAC_Init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	2. Set GPIO mode to Analog. (MODER = 0b11).
	3. Enable DAC peripheral (APB1).
	4. Enable DAC channel, Output buffer, Enable trigger, and select Trigger (TIM6=0b000) (CR).
	5. Set DAC register to initial value. (DHRxR)*/
	//1. Enable GPIOA peripheral. (DAC1_OUT=PA4)
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001cc:	4b0f      	ldr	r3, [pc, #60]	@ (800020c <DAC_Init+0x44>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0e      	ldr	r2, [pc, #56]	@ (800020c <DAC_Init+0x44>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
		//2. Set GPIO mode to Analog. (MODER = 0b11).
		GPIOA->MODER |= BV(4*2) | BV(4*2+1);
 80001d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000210 <DAC_Init+0x48>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000210 <DAC_Init+0x48>)
 80001de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80001e2:	6013      	str	r3, [r2, #0]
		//3. Enable DAC peripheral (APB1).
		RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 80001e4:	4b09      	ldr	r3, [pc, #36]	@ (800020c <DAC_Init+0x44>)
 80001e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001e8:	4a08      	ldr	r2, [pc, #32]	@ (800020c <DAC_Init+0x44>)
 80001ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80001ee:	6413      	str	r3, [r2, #64]	@ 0x40
		//4. Enable DAC channel, Output buffer, Enable trigger, and select Trigger (Software=0b111) (CR).
		DAC1->CR = DAC_CR_EN1|DAC_CR_TEN1;
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <DAC_Init+0x4c>)
 80001f2:	2205      	movs	r2, #5
 80001f4:	601a      	str	r2, [r3, #0]
		DAC1 ->CR &=~(DAC_CR_TSEL1_0|DAC_CR_TSEL1_1|DAC_CR_TSEL1_2);
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <DAC_Init+0x4c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <DAC_Init+0x4c>)
 80001fc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000200:	6013      	str	r3, [r2, #0]
}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000
 8000214:	40007400 	.word	0x40007400

08000218 <DAC_SetValue>:
void DAC_SetValue(uint16_t val) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
	//1. Set value in DAC register. (DHRxR)

	DAC1->DHR12R1 = val;
 8000222:	4a04      	ldr	r2, [pc, #16]	@ (8000234 <DAC_SetValue+0x1c>)
 8000224:	88fb      	ldrh	r3, [r7, #6]
 8000226:	6093      	str	r3, [r2, #8]
	//2. Trigger conversion (in SWTRIGR).
	//DAC1->SWTRIGR |= DAC_;
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40007400 	.word	0x40007400

08000238 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
		int val;
		SystemInit();
 800023e:	f000 f83f 	bl	80002c0 <SystemInit>
		DAC_Init();
 8000242:	f7ff ffc1 	bl	80001c8 <DAC_Init>
 8000246:	e000      	b.n	800024a <main+0x12>
					DAC_SetValue(val);

					Timer_Init(100);
					while(!flag);
					if(val==0)
						goto start;
 8000248:	bf00      	nop
			for(val = 0; val < 4096; val += 16,flag=0) {
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	e012      	b.n	8000276 <main+0x3e>
				DAC_SetValue(val);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	b29b      	uxth	r3, r3
 8000254:	4618      	mov	r0, r3
 8000256:	f7ff ffdf 	bl	8000218 <DAC_SetValue>
				Timer_Init(100);
 800025a:	2064      	movs	r0, #100	@ 0x64
 800025c:	f000 f882 	bl	8000364 <Timer_Init>
				while(!flag);
 8000260:	bf00      	nop
 8000262:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <main+0x84>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0fb      	beq.n	8000262 <main+0x2a>
			for(val = 0; val < 4096; val += 16,flag=0) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3310      	adds	r3, #16
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <main+0x84>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800027c:	dbe8      	blt.n	8000250 <main+0x18>
			while(val==4096){
 800027e:	e018      	b.n	80002b2 <main+0x7a>
					DAC_SetValue(val);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	b29b      	uxth	r3, r3
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ffc7 	bl	8000218 <DAC_SetValue>
					Timer_Init(100);
 800028a:	2064      	movs	r0, #100	@ 0x64
 800028c:	f000 f86a 	bl	8000364 <Timer_Init>
					while(!flag);
 8000290:	bf00      	nop
 8000292:	4b0a      	ldr	r3, [pc, #40]	@ (80002bc <main+0x84>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0fb      	beq.n	8000292 <main+0x5a>
					if(val==0)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0d3      	beq.n	8000248 <main+0x10>
				for(; val > 0; val -= 16,flag=0) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3b10      	subs	r3, #16
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <main+0x84>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	dce6      	bgt.n	8000280 <main+0x48>
			while(val==4096){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80002b8:	d0f8      	beq.n	80002ac <main+0x74>
			start:
 80002ba:	e7c6      	b.n	800024a <main+0x12>
 80002bc:	2000001c 	.word	0x2000001c

080002c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  DWT_Init();
 80002c4:	f000 f802 	bl	80002cc <DWT_Init>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}

080002cc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002d0:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <DWT_Init+0x58>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a13      	ldr	r2, [pc, #76]	@ (8000324 <DWT_Init+0x58>)
 80002d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80002da:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <DWT_Init+0x58>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a10      	ldr	r2, [pc, #64]	@ (8000324 <DWT_Init+0x58>)
 80002e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002e6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <DWT_Init+0x5c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000328 <DWT_Init+0x5c>)
 80002ee:	f023 0301 	bic.w	r3, r3, #1
 80002f2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <DWT_Init+0x5c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000328 <DWT_Init+0x5c>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <DWT_Init+0x5c>)
 8000302:	2200      	movs	r2, #0
 8000304:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000306:	bf00      	nop
    __ASM volatile ("NOP");
 8000308:	bf00      	nop
    __ASM volatile ("NOP");
 800030a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <DWT_Init+0x5c>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	bf0c      	ite	eq
 8000314:	2301      	moveq	r3, #1
 8000316:	2300      	movne	r3, #0
 8000318:	b2db      	uxtb	r3, r3
}
 800031a:	4618      	mov	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000edf0 	.word	0xe000edf0
 8000328:	e0001000 	.word	0xe0001000

0800032c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033a:	2b00      	cmp	r3, #0
 800033c:	db0b      	blt.n	8000356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 021f 	and.w	r2, r3, #31
 8000344:	4906      	ldr	r1, [pc, #24]	@ (8000360 <__NVIC_EnableIRQ+0x34>)
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	095b      	lsrs	r3, r3, #5
 800034c:	2001      	movs	r0, #1
 800034e:	fa00 f202 	lsl.w	r2, r0, r2
 8000352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100

08000364 <Timer_Init>:


#include "timer.h"
//#include "led.h"

void Timer_Init(uint32_t ms) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	//* Enable Timer APB clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 800036c:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <Timer_Init+0x70>)
 800036e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000370:	4a18      	ldr	r2, [pc, #96]	@ (80003d4 <Timer_Init+0x70>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6413      	str	r3, [r2, #64]	@ 0x40
	//* Set Timer clock -- PCLK = TCLK = 16 MHz : * Set PR = 16000
	TIM6->PSC = (PR-1);
 8000378:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <Timer_Init+0x74>)
 800037a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800037e:	629a      	str	r2, [r3, #40]	@ 0x28
	//* Calculate number of clocks to count (CNT).
	uint32_t cnt = (TCLK / 1000) * ms / PR;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000386:	fb02 f303 	mul.w	r3, r2, r3
 800038a:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <Timer_Init+0x78>)
 800038c:	fba2 2303 	umull	r2, r3, r2, r3
 8000390:	0a9b      	lsrs	r3, r3, #10
 8000392:	60fb      	str	r3, [r7, #12]
	//* Set CNT in ARR.
	TIM6->ARR = (cnt-1);
 8000394:	4a10      	ldr	r2, [pc, #64]	@ (80003d8 <Timer_Init+0x74>)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	3b01      	subs	r3, #1
 800039a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	//* Reset Timer Counter to 0.
	TIM6->CNT = 0;
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <Timer_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	@ 0x24
	//* Enable Timer Interrupt in DIER.
	TIM6->DIER |= TIM_DIER_UIE;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <Timer_Init+0x74>)
 80003a4:	68db      	ldr	r3, [r3, #12]
 80003a6:	4a0c      	ldr	r2, [pc, #48]	@ (80003d8 <Timer_Init+0x74>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	60d3      	str	r3, [r2, #12]
	//* Enable Timer Interrupt in NVIC.
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80003ae:	2036      	movs	r0, #54	@ 0x36
 80003b0:	f7ff ffbc 	bl	800032c <__NVIC_EnableIRQ>
	//
	TIM6->CR2 |= TIM_CR2_MMS_1;
 80003b4:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <Timer_Init+0x74>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a07      	ldr	r2, [pc, #28]	@ (80003d8 <Timer_Init+0x74>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6053      	str	r3, [r2, #4]
	//* Start Timer in CR1.
	TIM6->CR1 |= TIM_CR1_CEN;
 80003c0:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <Timer_Init+0x74>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a04      	ldr	r2, [pc, #16]	@ (80003d8 <Timer_Init+0x74>)
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6013      	str	r3, [r2, #0]
}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40001000 	.word	0x40001000
 80003dc:	10624dd3 	.word	0x10624dd3

080003e0 <TIM6_DAC_IRQHandler>:
int flag=0;
void TIM6_DAC_IRQHandler(void) {
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	//* Check if UIF flag is set (in SR).
	if(TIM6->SR & TIM_SR_UIF) {
 80003e4:	4b09      	ldr	r3, [pc, #36]	@ (800040c <TIM6_DAC_IRQHandler+0x2c>)
 80003e6:	691b      	ldr	r3, [r3, #16]
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d008      	beq.n	8000402 <TIM6_DAC_IRQHandler+0x22>
		//* Clear UIF in SR (Ack)
		TIM6->SR &= ~TIM_SR_UIF;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <TIM6_DAC_IRQHandler+0x2c>)
 80003f2:	691b      	ldr	r3, [r3, #16]
 80003f4:	4a05      	ldr	r2, [pc, #20]	@ (800040c <TIM6_DAC_IRQHandler+0x2c>)
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6113      	str	r3, [r2, #16]
		flag=1;
 80003fc:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <TIM6_DAC_IRQHandler+0x30>)
 80003fe:	2201      	movs	r2, #1
 8000400:	601a      	str	r2, [r3, #0]
		//* Perform interrupt handling -- Toggle LED
		//LedToggle(LED_BLUE_PIN);
	}
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40001000 	.word	0x40001000
 8000410:	2000001c 	.word	0x2000001c

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	@ (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000418:	f7ff ff52 	bl	80002c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	@ (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	@ (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	@ (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	@ (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	@ (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff fef7 	bl	8000238 <main>

0800044a <LoopForever>:

LoopForever:
  b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000458:	080004d0 	.word	0x080004d0
  ldr r2, =_sbss
 800045c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000460:	20000020 	.word	0x20000020

08000464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	4d0d      	ldr	r5, [pc, #52]	@ (80004a0 <__libc_init_array+0x38>)
 800046c:	4c0d      	ldr	r4, [pc, #52]	@ (80004a4 <__libc_init_array+0x3c>)
 800046e:	1b64      	subs	r4, r4, r5
 8000470:	10a4      	asrs	r4, r4, #2
 8000472:	2600      	movs	r6, #0
 8000474:	42a6      	cmp	r6, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	4d0b      	ldr	r5, [pc, #44]	@ (80004a8 <__libc_init_array+0x40>)
 800047a:	4c0c      	ldr	r4, [pc, #48]	@ (80004ac <__libc_init_array+0x44>)
 800047c:	f000 f818 	bl	80004b0 <_init>
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	10a4      	asrs	r4, r4, #2
 8000484:	2600      	movs	r6, #0
 8000486:	42a6      	cmp	r6, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000490:	4798      	blx	r3
 8000492:	3601      	adds	r6, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	f855 3b04 	ldr.w	r3, [r5], #4
 800049a:	4798      	blx	r3
 800049c:	3601      	adds	r6, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	080004c8 	.word	0x080004c8
 80004a4:	080004c8 	.word	0x080004c8
 80004a8:	080004c8 	.word	0x080004c8
 80004ac:	080004cc 	.word	0x080004cc

080004b0 <_init>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr

080004bc <_fini>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr
