
with_bsrr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000418  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000418  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00001418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800041c  0800041c  0000141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000420  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a40  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000297  00000000  00000000  00002a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00002d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000059  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ea7  00000000  00000000  00002de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b17  00000000  00000000  0001ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b6bc  00000000  00000000  0001b7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a6e63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000104  00000000  00000000  000a6ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a6fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  000a6fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000400 	.word	0x08000400

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08000400 	.word	0x08000400

08000218 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <DelayMs+0x44>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000226:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <DelayMs+0x48>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a0e      	ldr	r2, [pc, #56]	@ (8000264 <DelayMs+0x4c>)
 800022c:	fba2 2303 	umull	r2, r3, r2, r3
 8000230:	099b      	lsrs	r3, r3, #6
 8000232:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	68ba      	ldr	r2, [r7, #8]
 8000238:	fb02 f303 	mul.w	r3, r2, r3
 800023c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800023e:	bf00      	nop
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <DelayMs+0x44>)
 8000242:	685a      	ldr	r2, [r3, #4]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	1ad2      	subs	r2, r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	429a      	cmp	r2, r3
 800024c:	d3f8      	bcc.n	8000240 <DelayMs+0x28>
}
 800024e:	bf00      	nop
 8000250:	bf00      	nop
 8000252:	3714      	adds	r7, #20
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e0001000 	.word	0xe0001000
 8000260:	20000000 	.word	0x20000000
 8000264:	10624dd3 	.word	0x10624dd3

08000268 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	SystemInit();
 800026c:	f000 f844 	bl	80002f8 <SystemInit>

	RCC->AHB1ENR |=BV(3);
 8000270:	4b1f      	ldr	r3, [pc, #124]	@ (80002f0 <main+0x88>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a1e      	ldr	r2, [pc, #120]	@ (80002f0 <main+0x88>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOD->MODER &= ~BV(27);
 800027c:	4b1d      	ldr	r3, [pc, #116]	@ (80002f4 <main+0x8c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1c      	ldr	r2, [pc, #112]	@ (80002f4 <main+0x8c>)
 8000282:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BV(26);
 8000288:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <main+0x8c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a19      	ldr	r2, [pc, #100]	@ (80002f4 <main+0x8c>)
 800028e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000292:	6013      	str	r3, [r2, #0]

	GPIOD ->OTYPER |=BV(13);
 8000294:	4b17      	ldr	r3, [pc, #92]	@ (80002f4 <main+0x8c>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a16      	ldr	r2, [pc, #88]	@ (80002f4 <main+0x8c>)
 800029a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800029e:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &=~(BV(27)|BV(26));
 80002a0:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <main+0x8c>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a13      	ldr	r2, [pc, #76]	@ (80002f4 <main+0x8c>)
 80002a6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002aa:	6093      	str	r3, [r2, #8]

	GPIOD->PUPDR &=~BV(27);
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <main+0x8c>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a10      	ldr	r2, [pc, #64]	@ (80002f4 <main+0x8c>)
 80002b2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002b6:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR |=BV(26);
 80002b8:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <main+0x8c>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <main+0x8c>)
 80002be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002c2:	60d3      	str	r3, [r2, #12]
	while(1){
		GPIOD-> ODR |=BV(13);
 80002c4:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <main+0x8c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a0a      	ldr	r2, [pc, #40]	@ (80002f4 <main+0x8c>)
 80002ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ce:	6153      	str	r3, [r2, #20]
		DelayMs(1000);
 80002d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002d4:	f7ff ffa0 	bl	8000218 <DelayMs>

		GPIOD-> ODR &=~BV(13);
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <main+0x8c>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a05      	ldr	r2, [pc, #20]	@ (80002f4 <main+0x8c>)
 80002de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002e2:	6153      	str	r3, [r2, #20]
		DelayMs(1000);
 80002e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e8:	f7ff ff96 	bl	8000218 <DelayMs>
		GPIOD-> ODR |=BV(13);
 80002ec:	bf00      	nop
 80002ee:	e7e9      	b.n	80002c4 <main+0x5c>
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020c00 	.word	0x40020c00

080002f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  DWT_Init();
 80002fc:	f000 f802 	bl	8000304 <DWT_Init>
}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}

08000304 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000308:	4b14      	ldr	r3, [pc, #80]	@ (800035c <DWT_Init+0x58>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a13      	ldr	r2, [pc, #76]	@ (800035c <DWT_Init+0x58>)
 800030e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000312:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000314:	4b11      	ldr	r3, [pc, #68]	@ (800035c <DWT_Init+0x58>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	4a10      	ldr	r2, [pc, #64]	@ (800035c <DWT_Init+0x58>)
 800031a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800031e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000320:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <DWT_Init+0x5c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0e      	ldr	r2, [pc, #56]	@ (8000360 <DWT_Init+0x5c>)
 8000326:	f023 0301 	bic.w	r3, r3, #1
 800032a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800032c:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <DWT_Init+0x5c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0b      	ldr	r2, [pc, #44]	@ (8000360 <DWT_Init+0x5c>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000338:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <DWT_Init+0x5c>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800033e:	bf00      	nop
    __ASM volatile ("NOP");
 8000340:	bf00      	nop
    __ASM volatile ("NOP");
 8000342:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <DWT_Init+0x5c>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	bf0c      	ite	eq
 800034c:	2301      	moveq	r3, #1
 800034e:	2300      	movne	r3, #0
 8000350:	b2db      	uxtb	r3, r3
}
 8000352:	4618      	mov	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000edf0 	.word	0xe000edf0
 8000360:	e0001000 	.word	0xe0001000

08000364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000364:	480d      	ldr	r0, [pc, #52]	@ (800039c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000366:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000368:	f7ff ffc6 	bl	80002f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	@ (80003a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	@ (80003a8 <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	@ (80003ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	@ (80003b0 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000392:	f000 f811 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000396:	f7ff ff67 	bl	8000268 <main>

0800039a <LoopForever>:

LoopForever:
  b LoopForever
 800039a:	e7fe      	b.n	800039a <LoopForever>
  ldr   r0, =_estack
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a8:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 80003ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b0:	20000020 	.word	0x20000020

080003b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC1_2_IRQHandler>
	...

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	4d0d      	ldr	r5, [pc, #52]	@ (80003f0 <__libc_init_array+0x38>)
 80003bc:	4c0d      	ldr	r4, [pc, #52]	@ (80003f4 <__libc_init_array+0x3c>)
 80003be:	1b64      	subs	r4, r4, r5
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	2600      	movs	r6, #0
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	4d0b      	ldr	r5, [pc, #44]	@ (80003f8 <__libc_init_array+0x40>)
 80003ca:	4c0c      	ldr	r4, [pc, #48]	@ (80003fc <__libc_init_array+0x44>)
 80003cc:	f000 f818 	bl	8000400 <_init>
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	2600      	movs	r6, #0
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
